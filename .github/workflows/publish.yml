name: publish

on:
  release:
    types:
      - published

jobs:

  build:
    strategy:
      matrix:
        node-version: [10.x]
        os: [ubuntu-latest, macos-10.15, windows-2019]

    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install gcc-multilib
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install g++-multilib -y

    - name: Setup node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - id: get_version
      name: Extract semver
      uses: battila7/get-version-action@v2

    - name: Set package version
      run: npm --no-git-tag-version version ${{ steps.get_version.outputs.version-without-v }}

    - name: Install npm dependencies
      run: npm ci --ignore-scripts

    - name: Build artifact (ia32)
      # if: matrix.os != 'macos-latest'
      run: npm run build --target_arch=ia32

    - name: Build artifact (x64)
      run: npm run build --target_arch=x64

    - name: Upload to release
      if: steps.get_version.outputs.is-semver == 'true'
      uses: csexton/release-asset-action@v2
      with:
        pattern: packages/utimes*.tar.gz
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ github.event.release.upload_url }}

  build-arm:
    strategy:
      matrix:
        arch: [aarch64, armv7]
        distro: [ubuntu18.04]

    name: build ${{ matrix.distro }}:${{ matrix.arch }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - id: get_version
      name: Extract semver
      uses: battila7/get-version-action@v2

    - name: Set package version
      run: npm --no-git-tag-version version ${{ steps.get_version.outputs.version-without-v }}

    - name: Build artifact (${{ matrix.arch }})
      uses: uraimo/run-on-arch-action@v2.1.1
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}
        dockerRunArgs: --volume "${PWD}:/repo"
        install: |
          apt-get update -y
          apt-get install -y curl
          curl -fsSL https://deb.nodesource.com/setup_12.x | bash -
          apt-get install -y make g++ python nodejs
        run: |
          cd /repo
          npm ci --ignore-scripts
          npm run build

    - name: Upload to release
      if: steps.get_version.outputs.is-semver == 'true'
      uses: csexton/release-asset-action@v2
      with:
        pattern: packages/utimes*.tar.gz
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ github.event.release.upload_url }}

  test:
    needs: build
    strategy:
      matrix:
        node-version: [10, 12, 14, 16, 17]
        os: [ubuntu-latest, macos-latest, windows-latest]
        architecture: [x64]
        include:
          - os: windows-latest
            node-version: 16
            architecture: x86

    name: test ${{ matrix.os }}:${{ matrix.architecture }} (node v${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        architecture: ${{ matrix.architecture }}

    - id: get_version
      name: Extract semver
      uses: battila7/get-version-action@v2

    - name: Set package version
      run: npm --no-git-tag-version version ${{ steps.get_version.outputs.version-without-v }}

    - name: Install dependencies & artifact
      run: npm ci

    - name: Run tests
      run: npm test

  test-arm:
    needs: build-arm
    strategy:
      fail-fast: false
      matrix:
        node-version: [10, 16]

    name: test arm (node v${{ matrix.node-version }})
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - id: get_version
      name: Extract semver
      uses: battila7/get-version-action@v2

    - name: Set package version
      run: npm --no-git-tag-version version ${{ steps.get_version.outputs.version-without-v }}

    - name: Set up qemu
      uses: docker/setup-qemu-action@v1

    - name: Set up docker buildx
      uses: docker/setup-buildx-action@v1

    - name: Install & run tests in docker
      run: |
        docker buildx build --build-arg NODE_VERSION=${{ matrix.node-version }} --platform linux/arm,linux/arm64 -t armbuild:latest --progress=plain .

  publish:
    needs: [test, test-arm]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16
        registry-url: 'https://registry.npmjs.org'

    - id: get_version
      name: Extract semver
      uses: battila7/get-version-action@v2

    - name: Set package version
      run: npm --no-git-tag-version version ${{ steps.get_version.outputs.version-without-v }}

    - name: Install dependencies
      run: npm ci --ignore-scripts

    - name: Build source files
      run: npm run tsc

    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

